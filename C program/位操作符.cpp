#define _CRT_SECURE_NO_WARNINGS 1

# include <stdio.h>

int main()
{
	int a = 5;
	int b = 3;
	printf("a = %d b = %d\n", a, b);

	//按(二进制)位异或，相同为0，相异为1
	int c = a ^ b;
	printf("c = %d\n", c);
	//a 00000000000000000000000000000101
	//b 00000000000000000000000000000011
	//c 00000000000000000000000000000110

	//按(二进制)位与，两个都为1才是1
	int x = a & b;
	printf("x = %d\n", x);
	//a 00000000000000000000000000000101
    //b 00000000000000000000000000000011
	//x 00000000000000000000000000000001

	//按(二进制)位或，一个为1就是1
	int y = a | b;
	printf("y = %d\n", y);
	//a 00000000000000000000000000000101
    //b 00000000000000000000000000000011
	//y 00000000000000000000000000000111

	//以按位异或的应用：不使用第三个变量交换两个变量的值
	 
	//方法1：有缺点: 数据太大会溢出
	//a = a + b;    //8 = 5 + 3
	//b = a - b;    //5 = 8 - 3
	//a = a - b;    //3 = 8 - 5

	//方法2：(二进制)不会进位，所以不会有溢出的风险
	a = a ^ b;
	b = a ^ b;
	a = a ^ b;
 	//a 00000000000000000000000000000101
    //b 00000000000000000000000000000011
	//  00000000000000000000000000000110     a = a ^ b  6
	  
	//a 00000000000000000000000000000110
	//b 00000000000000000000000000000011
    //  00000000000000000000000000000101     b = a ^ b  5
	 
	//a 00000000000000000000000000000110
	//b 00000000000000000000000000000101
	//  00000000000000000000000000000011     a = b ^ a  3
	printf("a = %d b = %d\n", a, b); 

	//a ^ b ^ b = a
	//b 00000000000000000000000000000011
	//b 00000000000000000000000000000011
	//  00000000000000000000000000000000

	//  00000000000000000000000000000000
	//a 00000000000000000000000000000101
	//  00000000000000000000000000000101
	// 
	//结论：1. 两个相同的操作数异或为0 
	//      2. 0与任何操作数异或都为操作数本身
	//      3. 位操作符的操作数必须为整数

	return 0;
}
