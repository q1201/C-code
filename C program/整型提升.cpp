#define _CRT_SECURE_NO_WARNINGS 1

# include <stdio.h>

int main()
{
	char a = 3;
	//00000000000000000000000000000011 - 原码、反码、补码
	//00000011 - a           运算结束后结果被截断，存于a中

	char b = 127;
	//00000000000000000000000001111111 - 原码、反码、补码
	//01111111 - b           

	//a和b都是char类型的，没有一个达到int类型的大小，发生整形提升
	char c = a + b;
	//00000000000000000000000000000011 - a整型提升后
	//00000000000000000000000001111111 - b整型提升后
	//00000000000000000000000010000010 - c
	//10000010 - c          

	//以%d形式输出，需要整型提升
	//11111111111111111111111110000010 - 补码(在内存中计算)
	//11111111111111111111111110000001 - 反码
	//10000000000000000000000001111110 - 原码(计算机显示的数)

	printf("%d\n", c);        //输出结果为 -126


	char x = 1;

	printf("%u\n", sizeof x);   //输出结果为 1, %u - 无符号整型
	printf("%u\n", sizeof(+x)); //输出结果为 4
	printf("%u\n", sizeof(-x)); //输出结果为 4

	/*
	* 结论：
	       1. 在表达式计算时，没有一个变量没有达到int大小就会发生整型提升

		   2. 整型提升按照变量数据类型的符号位来提升
		     >1. 正数高位补符号位0
			 >2. 负数高位补符号位1
			 >3. 无符号整型提升高位补0
	*/
}